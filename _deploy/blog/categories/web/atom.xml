<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web | Tailored Shapes]]></title>
  <link href="http://tsmarsh.github.com/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://tsmarsh.github.com/"/>
  <updated>2014-08-12T11:44:18-04:00</updated>
  <id>http://tsmarsh.github.com/</id>
  <author>
    <name><![CDATA[Tom Marsh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pest]]></title>
    <link href="http://tsmarsh.github.com/blog/2013/04/21/pest/"/>
    <updated>2013-04-21T09:22:00-04:00</updated>
    <id>http://tsmarsh.github.com/blog/2013/04/21/pest</id>
    <content type="html"><![CDATA[<p>I had a thought.</p>

<p>REpresentational State Transfer is a very cool concept, especially if you want to build a very read heavy API. But it suffers from exactly the same problems as a lot of other technologies once two or more actors want to do change the same piece of data at the same time. There are no transactions and there are no clues as to what the client thought the data was when they changed it. What are you supposed to do?</p>

<p>It also has legacy problems in terms of support for the more exotic verbs “PUT”, “DELETE” have wider support, but you can still have problems with legacy browsers and firewalls.</p>

<p>This left me asking myself some questions.</p>

<!-- more -->


<p><em>How do we scale massively parallel writes from independent actors?</em></p>

<p>Persistent data structures.</p>

<p><em>How do they work?</em></p>

<p>Trees?</p>

<p><em>What else represents a tree?</em></p>

<p>URLS.</p>

<p>Hmmmmm.</p>

<p><em>So what would you get if you put a RESTful interface on top of a persistent tree?</em></p>

<p><strong>PE</strong>rsistent <strong>S</strong>tate <strong>T</strong>ransfer (PEST)!</p>

<h2>Read</h2>

<pre><code>GET http://somedomain/someresource.json
200
{"head": {}, "history": []}
</code></pre>

<p>I’m going to call this the atom. It represents the current state of the object and how to interrogate its history. It is not cachable at all and is the single point of flux.</p>

<h2>CREATE</h2>

<pre><code>POST http://somedomain/someresource.json
BODY {"key": "value"}
302 "http://somedomain/someresource/18jsh18s2.json"
{"key":"value"}
</code></pre>

<p>You get a cachable response in the form of a 302. The resulting value at /someresource/18jsh18s2.json is permanent and could be cached forever.</p>

<pre><code>GET http://somedomain/someresource.json
200
{"head": {"key": "value"}, "history": ["http://somedomain/someresource/18jsh18s2.json"]}
</code></pre>

<p>This is the response you would get if you interrogated the atom now.</p>

<h2>Update</h2>

<pre><code>POST http://somedomain/someresource/18jsh18s2.json
BODY {"key": "another value"}
302 "http://somedomain/someresource/128sj1054.json"
{"key": "another value"}
</code></pre>

<p>Pushing to the value gives you a 301. A permanent redirect. Your browser and client should feel free to treat all requests to this end point as meaning that you really meant the newer 128sj1054.json.</p>

<pre><code>GET http://somedomain/someresource.json
200
{"head": {"key": "another value"}, "history": ["http://somedomain/someresource/128sj1054.json", "http://somedomain/someresource/18jsh18s2.json"]}
</code></pre>

<p>The atom has been updated, as has its history.</p>

<h2>Delete</h2>

<pre><code>POST http://somedomain/someresource/18jsh18s2.json
BODY {}
302 "http://somedomain/someresource/81sh13sga.json"
{}
</code></pre>

<p>Deletion just marks the entity as empty. Didn’t mean to delete? Repost the value at history[1].</p>

<pre><code>GET http://somedomain/someresource.json
200
{"head": {}, "history": ["http://somedomain/someresource/81sh13sga.json", "http://somedomain/someresource/18jsh18s2.json"]}
</code></pre>

<h2>Conflict</h2>

<p>Posting to a resource already modified by another actor</p>

<pre><code>POST http://somedomain/someresource/18jsh18s2.json
BODY {"key": "another value"}
403

GET http://somedomain/someresource.json
{"head": {"key": "winning value"}, "history": ["http://somedomain/someresource/281s1sk1.json", "http://somedomain/someresource/18jsh18s2.json"]}
</code></pre>

<p>Now resubmit, and hope for the best!</p>

<p>This has some fun features:</p>

<ul>
<li>Only GET and POST</li>
<li>Super cache-able. You can push your responses out to the CDN and treat them as static content.</li>
<li>No transactions, but a clear path for conflict resolution</li>
<li>I’ve used psuedo-hashes of the content as their ID. They could be integers, timestamps, salted-hashes.</li>
<li>I’ve used JSON, but there is nothing preventing the use of other formats</li>
<li>Time is now built in to the value in order to represent state.</li>
<li>Clients can complete their processing on data from their copy of head in complete confidence</li>
</ul>


<p>  I could foresee using query parameters in the same way REST does. For example:</p>

<pre><code>GET http://somedomain/someresource.json?start=1
200
{"head": {}, "history": ["http://somedomain/someresource/18jsh18s2.json"]}
</code></pre>

<p>or history searches</p>

<pre><code>GET http://somedomain/someresource.json?key=value
200
{"results": ["http://somedomain/someresource/18jsh18s2.json"]}
</code></pre>
]]></content>
  </entry>
  
</feed>
